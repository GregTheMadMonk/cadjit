export module cadjit:tree;

import dxx.cstd.fixed;
import std;

namespace cadjit {

template <typename TNodeData>
class Tree {
public:
    using NodeData = TNodeData;

private:
    struct Node {
        std::shared_ptr<Node> parent;
        std::shared_ptr<Node> left, right;
        NodeData              data;
    }; // <-- struct Node

public:
    struct Iterator {
        using iterator_category = std::forward_iterator_tag;
        using difference_type   = std::ptrdiff_t;
        using value_type        = Node;
        using pointer           = Node*;
        using reference         = Node&;

        std::shared_ptr<Node> ptr;
        uz                    depth;

        Iterator() : ptr(nullptr), depth(std::numeric_limits<uz>::max()) {}
        Iterator(std::shared_ptr<Node> p, uz d) : ptr(p), depth(d) {}
        Iterator(const Iterator& other) : ptr(other.ptr), depth(other.depth) {}
        Iterator& operator=(const Iterator& other) {
            this->ptr = other.ptr;
            this->depth = other.depth;
            return *this;
        } // <-- Iterator& operator=(other)

        auto& operator++() {
            if (this->ptr->left != nullptr) {
                this->ptr = this->ptr->left;
                ++this->depth;
            } else if (this->ptr->right != nullptr) {
                this->ptr = this->ptr->right;
                ++this->depth;
            } else {
                while (this->ptr != nullptr) {
                    if (this->ptr->parent != nullptr && this->ptr == this->ptr->parent->left) {
                        // Didn't take the right path yet
                        if (this->ptr->parent->right != nullptr) {
                            this->ptr = this->ptr->parent->right;
                            break;
                        } else {
                            this->ptr = this->ptr->parent;
                            --this->depth;
                        }
                    } else {
                        this->ptr = this->ptr->parent;
                        --this->depth;
                    }
                }
            }
            return *this;
        }

        auto operator++(int) {
            const auto ret = *this;
            ++(*this);
            return ret;
        }

        auto& operator*(this auto& self) { return *self.ptr; }

        [[nodiscard]] 
        inline bool operator<=>(const Iterator&) const = default;
    }; // <-- struct Iterator

public:
    Tree(const NodeData& root_data)
        : root{
            std::make_shared<Node>(
                Node{
                    .parent = nullptr,
                    .left   = nullptr,
                    .right  = nullptr,
                    .data   = root_data,
                }
            )
          }
    {}

    [[nodiscard]]
    inline auto& get_root(this auto& self) { return self.root; }

    inline auto push_node(std::shared_ptr<Node> parent, const NodeData& data, bool left) {
        (left ? parent->left : parent->right) = std::make_shared<Node>(
            Node{
                .parent = parent,
                .left   = nullptr,
                .right  = nullptr,
                .data   = data,
            }
        );

        return (left ? parent->left : parent->right);
    }

    [[nodiscard]]
    inline auto begin() { return Iterator{ this->root, 0 }; }

    [[nodiscard]]
    inline auto begin() const { return Iterator{ this->root, 0 }; }

    [[nodiscard]]
    inline auto end()   { return Iterator{}; }

    [[nodiscard]]
    inline auto end() const   { return Iterator{}; }

private:
    std::shared_ptr<Node> root;
}; // <-- class Tree

} // <-- namespace cadjit
